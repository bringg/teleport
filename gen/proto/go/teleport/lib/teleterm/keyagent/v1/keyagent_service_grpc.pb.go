// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/lib/teleterm/keyagent/v1/keyagent_service.proto

package keyagentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyAgentService_Start_FullMethodName = "/teleport.lib.teleterm.keyagent.v1.KeyAgentService/Start"
	KeyAgentService_Stop_FullMethodName  = "/teleport.lib.teleterm.keyagent.v1.KeyAgentService/Stop"
)

// KeyAgentServiceClient is the client API for KeyAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KeyAgentService provides a Teleport key agent service. Allows multiple Teleport client
// processes to share a single instance of a Teleport key. Useful for PIV keys which can
// only be accessed by one process at a time.
type KeyAgentServiceClient interface {
	// Start starts the Teleport key agent server.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stop stops the Teleport key agent server.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type keyAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyAgentServiceClient(cc grpc.ClientConnInterface) KeyAgentServiceClient {
	return &keyAgentServiceClient{cc}
}

func (c *keyAgentServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, KeyAgentService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyAgentServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, KeyAgentService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyAgentServiceServer is the server API for KeyAgentService service.
// All implementations must embed UnimplementedKeyAgentServiceServer
// for forward compatibility.
//
// KeyAgentService provides a Teleport key agent service. Allows multiple Teleport client
// processes to share a single instance of a Teleport key. Useful for PIV keys which can
// only be accessed by one process at a time.
type KeyAgentServiceServer interface {
	// Start starts the Teleport key agent server.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stop stops the Teleport key agent server.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedKeyAgentServiceServer()
}

// UnimplementedKeyAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyAgentServiceServer struct{}

func (UnimplementedKeyAgentServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedKeyAgentServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedKeyAgentServiceServer) mustEmbedUnimplementedKeyAgentServiceServer() {}
func (UnimplementedKeyAgentServiceServer) testEmbeddedByValue()                         {}

// UnsafeKeyAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyAgentServiceServer will
// result in compilation errors.
type UnsafeKeyAgentServiceServer interface {
	mustEmbedUnimplementedKeyAgentServiceServer()
}

func RegisterKeyAgentServiceServer(s grpc.ServiceRegistrar, srv KeyAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyAgentService_ServiceDesc, srv)
}

func _KeyAgentService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAgentServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAgentService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAgentServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyAgentService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyAgentServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyAgentService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyAgentServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyAgentService_ServiceDesc is the grpc.ServiceDesc for KeyAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.lib.teleterm.keyagent.v1.KeyAgentService",
	HandlerType: (*KeyAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _KeyAgentService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _KeyAgentService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/lib/teleterm/keyagent/v1/keyagent_service.proto",
}
