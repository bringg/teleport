// Teleport
// Copyright (C) 2024 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teleport/lib/vnet/v1/vnet_service.proto

package vnetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VnetUserProcessService_AuthenticateProcess_FullMethodName = "/teleport.lib.vnet.v1.VnetUserProcessService/AuthenticateProcess"
	VnetUserProcessService_ResolveAppInfo_FullMethodName      = "/teleport.lib.vnet.v1.VnetUserProcessService/ResolveAppInfo"
	VnetUserProcessService_ReissueAppCert_FullMethodName      = "/teleport.lib.vnet.v1.VnetUserProcessService/ReissueAppCert"
	VnetUserProcessService_SignForApp_FullMethodName          = "/teleport.lib.vnet.v1.VnetUserProcessService/SignForApp"
	VnetUserProcessService_Ping_FullMethodName                = "/teleport.lib.vnet.v1.VnetUserProcessService/Ping"
)

// VnetUserProcessServiceClient is the client API for VnetUserProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VnetUserProcessService is a service the VNet user process provides to the
// VNet admin process.
type VnetUserProcessServiceClient interface {
	// AuthenticateProcess mutually authenticates the server and client VNet processes.
	AuthenticateProcess(ctx context.Context, in *AuthenticateProcessRequest, opts ...grpc.CallOption) (*AuthenticateProcessResponse, error)
	// ResolveAppInfo returns info for the given app fqdn, or an error if the app
	// is not present in any logged-in cluster.
	ResolveAppInfo(ctx context.Context, in *ResolveAppInfoRequest, opts ...grpc.CallOption) (*ResolveAppInfoResponse, error)
	// ReissueAppCert issues a new app cert.
	ReissueAppCert(ctx context.Context, in *ReissueAppCertRequest, opts ...grpc.CallOption) (*ReissueAppCertResponse, error)
	// SignForApp issues a signature with the private key associated with an x509
	// certificate previously issued for a requested app.
	SignForApp(ctx context.Context, in *SignForAppRequest, opts ...grpc.CallOption) (*SignForAppResponse, error)
	// Ping is used by the admin process to regularly poll that the user process
	// is still running, and to share the Teleport version between the two
	// processes to make sure they are compatible.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type vnetUserProcessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVnetUserProcessServiceClient(cc grpc.ClientConnInterface) VnetUserProcessServiceClient {
	return &vnetUserProcessServiceClient{cc}
}

func (c *vnetUserProcessServiceClient) AuthenticateProcess(ctx context.Context, in *AuthenticateProcessRequest, opts ...grpc.CallOption) (*AuthenticateProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateProcessResponse)
	err := c.cc.Invoke(ctx, VnetUserProcessService_AuthenticateProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vnetUserProcessServiceClient) ResolveAppInfo(ctx context.Context, in *ResolveAppInfoRequest, opts ...grpc.CallOption) (*ResolveAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveAppInfoResponse)
	err := c.cc.Invoke(ctx, VnetUserProcessService_ResolveAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vnetUserProcessServiceClient) ReissueAppCert(ctx context.Context, in *ReissueAppCertRequest, opts ...grpc.CallOption) (*ReissueAppCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReissueAppCertResponse)
	err := c.cc.Invoke(ctx, VnetUserProcessService_ReissueAppCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vnetUserProcessServiceClient) SignForApp(ctx context.Context, in *SignForAppRequest, opts ...grpc.CallOption) (*SignForAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignForAppResponse)
	err := c.cc.Invoke(ctx, VnetUserProcessService_SignForApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vnetUserProcessServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, VnetUserProcessService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VnetUserProcessServiceServer is the server API for VnetUserProcessService service.
// All implementations must embed UnimplementedVnetUserProcessServiceServer
// for forward compatibility.
//
// VnetUserProcessService is a service the VNet user process provides to the
// VNet admin process.
type VnetUserProcessServiceServer interface {
	// AuthenticateProcess mutually authenticates the server and client VNet processes.
	AuthenticateProcess(context.Context, *AuthenticateProcessRequest) (*AuthenticateProcessResponse, error)
	// ResolveAppInfo returns info for the given app fqdn, or an error if the app
	// is not present in any logged-in cluster.
	ResolveAppInfo(context.Context, *ResolveAppInfoRequest) (*ResolveAppInfoResponse, error)
	// ReissueAppCert issues a new app cert.
	ReissueAppCert(context.Context, *ReissueAppCertRequest) (*ReissueAppCertResponse, error)
	// SignForApp issues a signature with the private key associated with an x509
	// certificate previously issued for a requested app.
	SignForApp(context.Context, *SignForAppRequest) (*SignForAppResponse, error)
	// Ping is used by the admin process to regularly poll that the user process
	// is still running, and to share the Teleport version between the two
	// processes to make sure they are compatible.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedVnetUserProcessServiceServer()
}

// UnimplementedVnetUserProcessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVnetUserProcessServiceServer struct{}

func (UnimplementedVnetUserProcessServiceServer) AuthenticateProcess(context.Context, *AuthenticateProcessRequest) (*AuthenticateProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateProcess not implemented")
}
func (UnimplementedVnetUserProcessServiceServer) ResolveAppInfo(context.Context, *ResolveAppInfoRequest) (*ResolveAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAppInfo not implemented")
}
func (UnimplementedVnetUserProcessServiceServer) ReissueAppCert(context.Context, *ReissueAppCertRequest) (*ReissueAppCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReissueAppCert not implemented")
}
func (UnimplementedVnetUserProcessServiceServer) SignForApp(context.Context, *SignForAppRequest) (*SignForAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignForApp not implemented")
}
func (UnimplementedVnetUserProcessServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedVnetUserProcessServiceServer) mustEmbedUnimplementedVnetUserProcessServiceServer() {
}
func (UnimplementedVnetUserProcessServiceServer) testEmbeddedByValue() {}

// UnsafeVnetUserProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VnetUserProcessServiceServer will
// result in compilation errors.
type UnsafeVnetUserProcessServiceServer interface {
	mustEmbedUnimplementedVnetUserProcessServiceServer()
}

func RegisterVnetUserProcessServiceServer(s grpc.ServiceRegistrar, srv VnetUserProcessServiceServer) {
	// If the following call pancis, it indicates UnimplementedVnetUserProcessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VnetUserProcessService_ServiceDesc, srv)
}

func _VnetUserProcessService_AuthenticateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VnetUserProcessServiceServer).AuthenticateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VnetUserProcessService_AuthenticateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VnetUserProcessServiceServer).AuthenticateProcess(ctx, req.(*AuthenticateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VnetUserProcessService_ResolveAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VnetUserProcessServiceServer).ResolveAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VnetUserProcessService_ResolveAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VnetUserProcessServiceServer).ResolveAppInfo(ctx, req.(*ResolveAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VnetUserProcessService_ReissueAppCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReissueAppCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VnetUserProcessServiceServer).ReissueAppCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VnetUserProcessService_ReissueAppCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VnetUserProcessServiceServer).ReissueAppCert(ctx, req.(*ReissueAppCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VnetUserProcessService_SignForApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignForAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VnetUserProcessServiceServer).SignForApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VnetUserProcessService_SignForApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VnetUserProcessServiceServer).SignForApp(ctx, req.(*SignForAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VnetUserProcessService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VnetUserProcessServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VnetUserProcessService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VnetUserProcessServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VnetUserProcessService_ServiceDesc is the grpc.ServiceDesc for VnetUserProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VnetUserProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.lib.vnet.v1.VnetUserProcessService",
	HandlerType: (*VnetUserProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateProcess",
			Handler:    _VnetUserProcessService_AuthenticateProcess_Handler,
		},
		{
			MethodName: "ResolveAppInfo",
			Handler:    _VnetUserProcessService_ResolveAppInfo_Handler,
		},
		{
			MethodName: "ReissueAppCert",
			Handler:    _VnetUserProcessService_ReissueAppCert_Handler,
		},
		{
			MethodName: "SignForApp",
			Handler:    _VnetUserProcessService_SignForApp_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _VnetUserProcessService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/lib/vnet/v1/vnet_service.proto",
}
