/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable,add_pb_suffix,server_grpc1,ts_nocheck
// @generated from protobuf file "teleport/lib/teleterm/keyagent/v1/keyagent_service.proto" (package "teleport.lib.teleterm.keyagent.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Teleport
// Copyright (C) 2025 Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { KeyAgentService } from "./keyagent_service_pb";
import type { StopResponse } from "./keyagent_service_pb";
import type { StopRequest } from "./keyagent_service_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartResponse } from "./keyagent_service_pb";
import type { StartRequest } from "./keyagent_service_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * KeyAgentService provides a Teleport key agent service. Allows multiple Teleport client
 * processes to share a single instance of a Teleport key. Useful for PIV keys which can
 * only be accessed by one process at a time.
 *
 * @generated from protobuf service teleport.lib.teleterm.keyagent.v1.KeyAgentService
 */
export interface IKeyAgentServiceClient {
    /**
     * Start starts the Teleport key agent server.
     *
     * @generated from protobuf rpc: Start(teleport.lib.teleterm.keyagent.v1.StartRequest) returns (teleport.lib.teleterm.keyagent.v1.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse>;
    /**
     * Stop stops the Teleport key agent server.
     *
     * @generated from protobuf rpc: Stop(teleport.lib.teleterm.keyagent.v1.StopRequest) returns (teleport.lib.teleterm.keyagent.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse>;
}
/**
 * KeyAgentService provides a Teleport key agent service. Allows multiple Teleport client
 * processes to share a single instance of a Teleport key. Useful for PIV keys which can
 * only be accessed by one process at a time.
 *
 * @generated from protobuf service teleport.lib.teleterm.keyagent.v1.KeyAgentService
 */
export class KeyAgentServiceClient implements IKeyAgentServiceClient, ServiceInfo {
    typeName = KeyAgentService.typeName;
    methods = KeyAgentService.methods;
    options = KeyAgentService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Start starts the Teleport key agent server.
     *
     * @generated from protobuf rpc: Start(teleport.lib.teleterm.keyagent.v1.StartRequest) returns (teleport.lib.teleterm.keyagent.v1.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRequest, StartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Stop stops the Teleport key agent server.
     *
     * @generated from protobuf rpc: Stop(teleport.lib.teleterm.keyagent.v1.StopRequest) returns (teleport.lib.teleterm.keyagent.v1.StopResponse);
     */
    stop(input: StopRequest, options?: RpcOptions): UnaryCall<StopRequest, StopResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopRequest, StopResponse>("unary", this._transport, method, opt, input);
    }
}
